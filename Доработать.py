import telebot
from telebot import types
import pandas as pd
from io import BytesIO
import os
import re
import time
import tempfile
from functools import wraps
from datetime import datetime
import threading
import pathlib as path
from openpyxl import load_workbook, Workbook

RIGHTS_FILE = '/content/drive/MyDrive/rights.xlsx'
REPORTS_DIR = "/content/drive/MyDrive/reports"
os.makedirs(REPORTS_DIR, exist_ok=True)
if os.path.exists('shopofmanagers.csv'):
    shopofmanagers = pd.read_csv('shopofmanagers.csv')
else:
    shopofmanagers = pd.DataFrame(columns=['id_manager', 'name_manager', 'id_shop', 'name_shop'])
def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(RIGHTS_FILE):
        try:
            return pd.read_excel(RIGHTS_FILE)
        except:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            columns = ['id', 'role', 'name', 'number']
            return pd.DataFrame(columns=columns)
    else:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_admin = pd.DataFrame({
            'id': ['A00001'],
            'role': ['Administrator'],
            'name': ['IgorSchenderovich'],
            'number': [1]
        })
        save_users(default_admin)
        return default_admin

def save_users(df):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(RIGHTS_FILE), exist_ok=True)
        df.to_excel(RIGHTS_FILE, index=False, engine='openpyxl')
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

names = load_users()
TOKEN = '7791429879:AAEgbCL8bFjQYnb81Rf1s2Hn_F5lRbZ3eKo'
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_roles = {}  # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π
shop_data = {}    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
user_chat_id={}
shop = {}
#–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=['start', 'help'])
def welcome_message(message):
    welcome_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤!
–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:
- –°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç–æ—á–µ–∫
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã
- –°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    """
    bot.send_message(message.chat.id, welcome_text)






@bot.message_handler(commands=['id'])
def handle_id_command(message):
    msg = bot.send_message(message.chat.id,
                           "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü—Ä–µ—Ñ–∏–∫—Å (A/M/S) + 5 —Ü–∏—Ñ—Ä\n–ü—Ä–∏–º–µ—Ä: A00123 –∏–ª–∏ M00001")
    bot.register_next_step_handler(msg, process_user_id)
def process_user_id(message):
    try:
        user_id = message.text.strip().upper()
        role_mapping = {'A': 'admin', 'M': 'manager', 'S': 'shop'}

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ ID
        if len(user_id) != 6 or user_id[0] not in role_mapping or not user_id[1:].isdigit():
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: A00123")
            return

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user_row = names.loc[names['id'] == user_id]

        if user_row.empty:
            bot.reply_to(message, "‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
        role_prefix = user_id[0]
        role = role_mapping.get(role_prefix)

        user_roles[message.chat.id] = role
        user_chat_id[message.chat.id]=user_id

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        responses = {
            'admin': "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            'manager': "üìä –ú–µ–Ω–µ–¥–∂–µ—Ä\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/plan - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω\n/statm - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/my_shops-–≤–∞—à–∏ —Ç–æ—á–∫–∏",
            'shop': "üè™ –ú–∞–≥–∞–∑–∏–Ω\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/report - —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
        }

        bot.send_message(message.chat.id, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n{responses[role]}")

    except KeyError:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        bot.reply_to(message, f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")





# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


#–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def admin_required(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if user_roles.get(message.chat.id) != 'admin':
            bot.reply_to(message, "‚õî –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        return func(message, *args, **kwargs)

    return wrapper





def error_handler(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        try:
            return func(message, *args, **kwargs)
        except Exception as e:
            handle_error(message, e)

    return wrapper


def validate_id(id_str: str, role: str = None) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π –≤ –ø—Ä–µ—Ñ–∏–∫—Å–µ"""
    if len(id_str) != 6:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ ID: {len(id_str)} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 6 —Å–∏–º–≤–æ–ª–æ–≤)")

    prefix = id_str[0]
    number_part = id_str[1:]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    valid_prefixes = {'A', 'M', 'S'}
    if prefix not in valid_prefixes:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_prefixes)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if role:
        expected_prefix = role[0].upper()
        if prefix != expected_prefix:
            raise ValueError(f"–î–ª—è —Ä–æ–ª–∏ {role} —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å {expected_prefix}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å—Ç–∏
    if not number_part.isdigit():
        raise ValueError("–ü–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 5 —Ü–∏—Ñ—Ä")

    return id_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID


def find_user(id_str: str, role: str) -> pd.Series:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'id' –≤–º–µ—Å—Ç–æ 'user id'
    df = names[
        (names['id'] == id_str) &
        (names['role'].str.upper() == role.upper())
        ]

    if df.empty:
        raise ValueError(f"{role.capitalize()} —Å ID {id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return df.iloc[0]





#–§—É–Ω–∫—Ü–∏—è link_shop_to_manager
@bot.message_handler(commands=['link_shop_to_manager'])
@admin_required
@error_handler
def start_linking(message):
    user_data[message.chat.id] = {'step': 'manager'}
    bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: M12345):")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'manager')
@admin_required
@error_handler
def process_manager(message):
    chat_id = message.chat.id
    try:
        raw_input = message.text.strip().upper()
        manager_id = validate_id(raw_input, 'manager')
        manager = find_user(manager_id, 'Manager')

        user_data[chat_id] = {
            'manager': {
                'id': manager_id,
                'name': manager['name']
            },
            'shops': [],
            'step': 'shop'
        }
        bot.send_message(chat_id, "üè™ –í–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: S12345):")

    except ValueError as ve:
        bot.send_message(chat_id, f"‚ùå {str(ve)}")
        start_linking(message)


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'shop')
@admin_required
@error_handler
def process_shop(message):
    chat_id = message.chat.id
    try:
        raw_input = message.text.strip().upper()
        shop_id = validate_id(raw_input, 'shop')
        shop = find_user(shop_id, 'Shop')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤—è–∑–∏
        exists = not shopofmanagers[
            (shopofmanagers['id_manager'] == user_data[chat_id]['manager']['id']) &
            (shopofmanagers['id_shop'] == shop_id)
            ].empty

        if exists:
            raise ValueError("–°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        user_data[chat_id]['shops'].append({
            'id': shop_id,
            'name': shop['name']
        })

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –º–∞–≥–∞–∑–∏–Ω", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É")

        bot.send_message(
            chat_id,
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫:\n{shop['name']}",
            reply_markup=markup
        )
        user_data[chat_id]['step'] = 'confirmation'

    except ValueError as ve:
        bot.send_message(chat_id, f"‚ùå {str(ve)}\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ ID –º–∞–≥–∞–∑–∏–Ω–∞:")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'confirmation')
@admin_required
@error_handler
def finalize_linking(message):
    chat_id = message.chat.id
    data = user_data[chat_id]

    if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –º–∞–≥–∞–∑–∏–Ω':
        data['step'] = 'shop'
        bot.send_message(chat_id, "üè™ –í–≤–µ–¥–∏—Ç–µ ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π
    new_entries = [{
        'id_manager': data['manager']['id'],
        'name_manager': data['manager']['name'],
        'id_shop': shop['id'],
        'name_shop': shop['name']
    } for shop in data['shops']]
    try:
        pd.DataFrame(new_entries).to_csv(
            'shopofmanagers.csv',
            mode='a',
            header=not pd.io.common.file_exists('shopofmanagers.csv'),
            index=False
        )

        report = [
                     f"üîó –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {len(new_entries)}",
                     f"üë®üíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {data['manager']['name']}",
                     "üè™ –ú–∞–≥–∞–∑–∏–Ω—ã:"
                 ] + [f"‚Ä¢ {shop['name']}" for shop in data['shops']]

        bot.send_message(
            chat_id,
            "\n".join(report),
            reply_markup=types.ReplyKeyboardRemove()
        )

    finally:
        if chat_id in user_data:
            del user_data[chat_id]


def handle_error(message, error):
    chat_id = message.chat.id
    error_msg = [
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:",
        f"‚Ä¢ –¢–∏–ø: {type(error).__name__}",
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {str(error)}"
    ]

    bot.send_message(chat_id, "\n".join(error_msg))
    bot.send_message(chat_id, "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    if chat_id in user_data:
        del user_data[chat_id]






#–§—É–Ω–∫—Ü–∏—è get_links
@bot.message_handler(commands=['get_links'])
@admin_required
@error_handler
def get_links_command(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å–≤—è–∑–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
    """
    chat_id = message.chat.id

    try:
        # –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if not os.path.exists('shopofmanagers.csv'):
            bot.send_message(chat_id, "üì≠ –ë–∞–∑–∞ —Å–≤—è–∑–µ–π –ø—É—Å—Ç–∞")
            return

        df = pd.read_csv('shopofmanagers.csv')

        expected_columns = ['id_manager', 'name_manager', 'id_shop', 'name_shop']
        if not all(col in df.columns for col in expected_columns):
            missing = set(expected_columns) - set(df.columns)
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")

        report_data = df[expected_columns]

        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            with pd.ExcelWriter(tmp.name, engine='xlsxwriter') as writer:
                report_data.to_excel(
                    writer,
                    sheet_name='–°–≤—è–∑–∏',
                    index=False,
                    header=['ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞', 'ID –º–∞–≥–∞–∑–∏–Ω–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞']
                )

                worksheet = writer.sheets['–°–≤—è–∑–∏']
                for col_num, col_name in enumerate(expected_columns):
                    max_len = max(
                        report_data[col_name].astype(str).map(len).max(),
                        len(col_name)
                    ) + 2
                    worksheet.set_column(col_num, col_num, max_len)

            with open(tmp.name, 'rb') as file:
                bot.send_document(
                    chat_id=chat_id,
                    document=file,
                    caption='üîó –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤',
                    visible_file_name='Manager_Shop_Links.xlsx'
                )

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    finally:
        if 'tmp' in locals():
            try:
                os.remove(tmp.name)
            except:
                pass


#–§—É–Ω–∫—Ü–∏—è stats
@bot.message_handler(commands=['stats'])
def handle_stats(message):
    if user_roles.get(message.chat.id) == 'admin':
        stats_text = """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 143
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: 67
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: 82%
        """
        bot.send_message(message.chat.id, stats_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@bot.message_handler(commands=['reports'])
def handle_reports_command(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if user_roles.get(message.chat.id) != 'admin':
            bot.send_message(message.chat.id, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ–¥–∞–º–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        current_year = datetime.now().year
        markup.add(str(current_year), str(current_year - 1))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_data[message.chat.id] = {'step': 'select_year'}
        
        bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(message, process_year_selection)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_year_selection(message):
    try:
        chat_id = message.chat.id
        
        if message.text not in [str(datetime.now().year), str(datetime.now().year - 1)]:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≥–æ–¥")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞
        user_data[chat_id] = {
            'step': 'select_month',
            'year': int(message.text)
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=3)
        months = [
            "1Ô∏è‚É£ –Ø–Ω–≤–∞—Ä—å", "2Ô∏è‚É£ –§–µ–≤—Ä–∞–ª—å", "3Ô∏è‚É£ –ú–∞—Ä—Ç",
            "4Ô∏è‚É£ –ê–ø—Ä–µ–ª—å", "5Ô∏è‚É£ –ú–∞–π", "6Ô∏è‚É£ –ò—é–Ω—å",
            "7Ô∏è‚É£ –ò—é–ª—å", "8Ô∏è‚É£ –ê–≤–≥—É—Å—Ç", "9Ô∏è‚É£ –°–µ–Ω—Ç—è–±—Ä—å",
            "üîü –û–∫—Ç—è–±—Ä—å", "1Ô∏è‚É£1Ô∏è‚É£ –ù–æ—è–±—Ä—å", "1Ô∏è‚É£2Ô∏è‚É£ –î–µ–∫–∞–±—Ä—å"
        ]
        markup.add(*months)
        
        bot.send_message(chat_id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=markup)
        bot.register_next_step_handler(message, process_month_selection)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if message.chat.id in user_data:
            del user_data[message.chat.id]

def process_month_selection(message):
    try:
        chat_id = message.chat.id
        user_info = user_data.get(chat_id, {})
        
        if user_info.get('step') != 'select_month' or 'year' not in user_info:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥")
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ emoji
        month_map = {
            "1Ô∏è‚É£": 1, "2Ô∏è‚É£": 2, "3Ô∏è‚É£": 3, "4Ô∏è‚É£": 4, "5Ô∏è‚É£": 5, "6Ô∏è‚É£": 6,
            "7Ô∏è‚É£": 7, "8Ô∏è‚É£": 8, "9Ô∏è‚É£": 9, "üîü": 10, "1Ô∏è‚É£1Ô∏è‚É£": 11, "1Ô∏è‚É£2Ô∏è‚É£": 12
        }
        
        month_emoji = message.text.split()[0]
        month_num = month_map.get(month_emoji)
        
        if not month_num:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Å—è—Ü")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"reports_{user_info['year']}_{month_num:02d}.xlsx"
        file_path = os.path.join(REPORTS_DIR, file_name)

        if not os.path.exists(file_path):
            bot.send_message(chat_id, f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", 
                          reply_markup=types.ReplyKeyboardRemove())
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_names = [
            "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
            "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
        ]
        month_name = month_names[month_num - 1]
        
        # –ß–∏—Ç–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        df = pd.read_excel(file_path, sheet_name=None)
        sheets_count = len(df)
        shops_count = sum(len(sheet) for sheet in df.values() if isinstance(sheet, pd.DataFrame))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        caption = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {month_name} {user_info['year']} –≥–æ–¥–∞\n"
            f"üìÇ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {sheets_count} –ª–∏—Å—Ç–æ–≤\n"
            f"üè™ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {shops_count}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
        with open(file_path, 'rb') as file:
            bot.send_document(
                chat_id=chat_id,
                document=file,
                caption=caption,
                reply_markup=types.ReplyKeyboardRemove(),
                visible_file_name=f"–û—Ç—á–µ—Ç—ã_{month_name}_{user_info['year']}.xlsx"
            )
            
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if chat_id in user_data:
            del user_data[chat_id]

@bot.message_handler(commands=['reports_current'])
def handle_reports_current(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    try:
        if user_roles.get(message.chat.id) != 'admin':
            bot.send_message(message.chat.id, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        current_date = datetime.now()
        file_name = f"reports_{current_date.year}_{current_date.month:02d}.xlsx"
        file_path = os.path.join(REPORTS_DIR, file_name)

        if not os.path.exists(file_path):
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df = pd.read_excel(file_path, sheet_name=None)
        sheets_count = len(df)
        shops_count = sum(len(sheet) for sheet in df.values() if isinstance(sheet, pd.DataFrame))
        
        month_names = [
            "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
            "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
        ]
        month_name = month_names[current_date.month - 1]

        caption = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({month_name} {current_date.year})\n"
            f"üìÇ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {sheets_count} –ª–∏—Å—Ç–æ–≤\n"
            f"üè™ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {shops_count}"
        )

        with open(file_path, 'rb') as file:
            bot.send_document(
                chat_id=message.chat.id,
                document=file,
                caption=caption,
                visible_file_name=f"–û—Ç—á–µ—Ç—ã_—Ç–µ–∫—É—â–∏–π_{current_date.strftime('%Y-%m')}.xlsx"
            )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")





#–§—É–Ω–∫—Ü–∏—è users
@bot.message_handler(commands=['users'])
def handle_users(message):
    if user_roles.get(message.chat.id) == 'admin':
        users_text = """
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
–ö–æ–º–∞–Ω–¥—ã:
/get_info - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/get_names- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π(xls)
/add_user - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove_user - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/link_shop_to_manager - –ø—Ä–∏–≤—è–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
/get_links - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–≤—è–∑—è–º–∏
        """
        bot.send_message(message.chat.id, users_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

user_data = {}
def create_and_add_id(role, name):
    roles_index = {'Developer': 'T', 'Administrator': 'A', 'Manager': 'M', 'Shop': 'S'}  # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    k = roles_index[role]

    existing = names[names['role'] == role]
    if existing.empty:
        n = 1
    else:
        n = existing['number'].max() + 1

    numeric_part = str(n).zfill(5)
    new_id = f"{k}{numeric_part}"  # –¢–µ–ø–µ—Ä—å ID —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    names.loc[len(names)] = [new_id, role, name, n]
    names.to_csv('rights.xlsx', index=False)
    return new_id
def clean_user_data(chat_id):
    """–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id in user_data:
        del user_data[chat_id]





#–§—É–Ω–∫—Ü–∏—è add_user
@bot.message_handler(commands=['add_user'])
def handle_add_user(message):
    if user_roles.get(message.chat.id) != 'admin':
        bot.send_message(message.chat.id, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    markup.add('Shop', 'Administrator', 'Manager')

    bot.send_message(message.chat.id, "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, process_role_step)

def process_role_step(message):
    try:
        chat_id = message.chat.id
        role_mapping = {
            'shop': 'Shop',
            'administrator': 'Administrator',
            'manager': 'Manager'
        }
        
        input_role = message.text.strip().lower()
        role_name = role_mapping.get(input_role)
        
        if not role_name:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

        user_data[chat_id] = {'role': role_name}
        bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_location_step)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        clean_user_data(chat_id)

def process_location_step(message):
    try:
        chat_id = message.chat.id
        if message.content_type != 'text':
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º")

        location = message.text.strip()
        if len(location) < 2:
            raise ValueError("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")

        role_data = user_data.get(chat_id, {})
        role_name = role_data.get('role')

        if not role_name:
            raise ValueError("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

        new_user_id = create_user_id(role_name)
        
        global names
        new_user = pd.DataFrame({
            'id': [new_user_id],
            'role': [role_name],
            'name': [location],
            'number': [get_next_number(role_name)]
        })
        
        names = pd.concat([names, new_user], ignore_index=True)
        
        if save_users(names):
            bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!\nID: {new_user_id}\n–¢–æ—á–∫–∞: {location}")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        clean_user_data(chat_id)

def create_user_id(role):
    prefix_map = {
        'Administrator': 'A',
        'Manager': 'M',
        'Shop': 'S'
    }
    prefix = prefix_map.get(role, 'U')
    max_num = names[names['role'] == role]['number'].max()
    next_num = 1 if pd.isna(max_num) else max_num + 1
    return f"{prefix}{next_num:05d}"

def get_next_number(role):
    max_num = names[names['role'] == role]['number'].max()
    return 1 if pd.isna(max_num) else max_num + 1

def clean_user_data(chat_id):
    if chat_id in user_data:
        del user_data[chat_id]







#–§—É–Ω–∫—Ü–∏—è get_names
@bot.message_handler(commands=['get_names'])
def send_names_excel(message):
    try:
        if user_roles.get(message.chat.id) != 'admin':
            bot.reply_to(message, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        if names.empty:
            bot.reply_to(message, "üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        output = BytesIO()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä sheet_name
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            names.to_excel(
                excel_writer=writer,
                sheet_name='Users',  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                index=False
            )

        output.seek(0)
        bot.send_document(
            chat_id=message.chat.id,
            document=output,
            caption='üìä –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            visible_file_name='users_database.xlsx'
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        output.close() if 'output' in locals() else None







#–§—É–Ω–∫—Ü–∏—è remove_user
@bot.message_handler(commands=['remove_user'])
def handle_remove_user(message):
    if user_roles.get(message.chat.id) == 'admin':
        bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_remove_user)
    else:
        bot.send_message(message.chat.id, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")


def process_remove_user(message):
    try:
        chat_id = message.chat.id
        raw_input = message.text.strip()
        user_id_to_remove = raw_input[0].upper() + raw_input[1:].lower()

        if not re.match(r'^[A-Za-z]\d{5}$', user_id_to_remove):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: A12345")

        # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        mask = names['id'].str.upper() == user_id_to_remove.upper()

        if not mask.any():
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        found_id = names.loc[mask, 'id'].values[0]

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        names.drop(names[mask].index, inplace=True)
        names.to_csv('rights.xlsx', index=False)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {found_id} —É–¥–∞–ª—ë–Ω")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def escape_markdown(text):
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])


def safe_escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞"""
    if not isinstance(text, str):
        raise TypeError("Input must be string")
    return escape_markdown(text)







#–§—É–Ω–∫—Ü–∏—è get_info
@bot.message_handler(commands=['get_info'])
def handle_get_info(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_roles.get(message.chat.id) != 'admin':
            bot.reply_to(message, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –±–∞–∑—É
        if names.empty:
            bot.reply_to(message, "üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π
        ROLE_CONFIG = {
            'Administrator': {'emoji': 'üëë', 'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'},
            'Manager': {'emoji': 'üíº', 'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã'},
            'Shop': {'emoji': 'üè™', 'name': '–ú–∞–≥–∞–∑–∏–Ω—ã'},
        }

        grouped = names.groupby('role')

        for role, config in ROLE_CONFIG.items():
            if role not in grouped.groups:
                continue

            role_users = grouped.get_group(role)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–ª–∏
            role_header = (
                f"{config['emoji']} "
                f"*{safe_escape_markdown(config['name'])}* "
                f"[{len(role_users)}]"
            )
            bot.send_message(
                message.chat.id,
                role_header,
                parse_mode='MarkdownV2'
            )

            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for _, user in role_users.iterrows():
                user_info = (
                    f"üÜî ID: `{safe_escape_markdown(str(user['id']))}`\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {safe_escape_markdown(str(user['name']))}\n"
                )
                bot.send_message(
                    message.chat.id,
                    user_info,
                    parse_mode='MarkdownV2'
                )
                time.sleep(0.2)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")






#–§—É–Ω–∫—Ü–∏—è remove_user
@bot.message_handler(commands=['remove_link'])
@admin_required
@error_handler
def start_remove_link(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'step': 'remove_manager_id'}
    bot.send_message(chat_id, "üîç –í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π:")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'remove_manager_id')
@admin_required
@error_handler
def process_remove_manager(message):
    chat_id = message.chat.id
    user_data[chat_id]['manager_id'] = message.text.strip()
    user_data[chat_id]['step'] = 'remove_shop_id'
    bot.send_message(chat_id, "üîç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏:")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'remove_shop_id')
@admin_required
@error_handler
def process_remove_shop(message):
    chat_id = message.chat.id
    data = user_data[chat_id]

    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv('shopofmanagers.csv')
        initial_count = len(df)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
        mask = (df['id_manager'] == data['manager_id']) & (df['id_shop'] == message.text.strip())
        df = df[~mask]

        if len(df) == initial_count:
            raise ValueError("–°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        df.to_csv('shopofmanagers.csv', index=False)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = [
            "‚úÖ –°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:",
            f"üë®üíº ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {data['manager_id']}",
            f"üè™ ID –º–∞–≥–∞–∑–∏–Ω–∞: {message.text.strip()}"
        ]

        bot.send_message(chat_id, "\n".join(report))

    except Exception as e:
        handle_error(message, e)
    finally:
        if chat_id in user_data:
            del user_data[chat_id]

#–§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@bot.message_handler(commands=['my_shops'])
def handle_my_shops(message):
    user_tg_id = message.chat.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_roles.get(user_tg_id) != 'manager':
        bot.send_message(user_tg_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "M00001") –∏–∑ —Å–ª–æ–≤–∞—Ä—è user_chat_id
    try:
        manager_id = user_chat_id[user_tg_id]  # –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º "M00001"
    except KeyError:
        bot.send_message(user_tg_id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ")
        return

    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ manager_id ("M00001")
        if isinstance(shopofmanagers, dict):
            manager_shops = [shop for shop in shopofmanagers.values() if str(shop.get('id_manager')) == manager_id]
        elif hasattr(shopofmanagers, 'iterrows'):  # pandas DataFrame
            manager_shops = [row.to_dict() for _, row in shopofmanagers.iterrows() if
                             str(row['id_manager']) == manager_id]
        else:  # –°–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
            manager_shops = [shop for shop in shopofmanagers if str(shop.get('id_manager')) == manager_id]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not manager_shops:
            bot.send_message(user_tg_id, "‚ÑπÔ∏è –ö –≤–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
            return

        response = "üè™ –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n"
        for i, shop in enumerate(manager_shops, 1):
            response += (
                f"{i}. ID –º–∞–≥–∞–∑–∏–Ω–∞: {shop.get('id_shop', 'N/A')}\n"
                f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {shop.get('name_shop', 'N/A')}\n\n"
            )

        bot.send_message(user_tg_id, response)

    except Exception as e:
        bot.send_message(user_tg_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {str(e)}")
@bot.message_handler(commands=['set_plan'])
def handle_set_plan(message):
    if user_roles.get(message.chat.id) != 'manager':
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    try:
        manager_id = user_chat_id[message.chat.id]
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_shops = shopofmanagers[shopofmanagers['id_manager'] == manager_id]

        if manager_shops.empty:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ö –≤–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for _, shop in manager_shops.iterrows():
            markup.add(f"{shop['id_shop']} - {shop['name_shop']}")

        msg = bot.send_message(
            message.chat.id,
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∞:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_shop_selection_for_plan)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_shop_selection_for_plan(message):
    try:
        shop_info = message.text.split(' - ')[0]
        shop_id = shop_info.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
        manager_id = user_chat_id[message.chat.id]
        valid_shops = shopofmanagers[
            (shopofmanagers['id_manager'] == manager_id) &
            (shopofmanagers['id_shop'] == shop_id)
        ]

        if valid_shops.empty:
            bot.send_message(message.chat.id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
            return

        shop_name = valid_shops.iloc[0]['name_shop']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_data[message.chat.id] = {
            'action': 'set_plan',
            'shop_id': shop_id,
            'shop_name': shop_name
        }

        bot.send_message(
            message.chat.id,
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_plan_amount)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_plan_amount(message):
    try:
        amount = float(message.text.strip())
        chat_id = message.chat.id
        user_info = user_data.get(chat_id, {})

        if user_info.get('action') != 'set_plan':
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏")

        shop_id = user_info['shop_id']
        shop_name = user_info['shop_name']
        manager_id = user_chat_id[chat_id]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
        global plans_df
        if shop_id in plans_df['shop_id'].values:
            plans_df.loc[plans_df['shop_id'] == shop_id, ['plan_amount', 'date']] = [amount, datetime.datetime.now().date()]
        else:
            new_plan = pd.DataFrame([{
                'shop_id': shop_id,
                'shop_name': shop_name,
                'plan_amount': amount,
                'manager_id': manager_id,
                'date': datetime.datetime.now().date()
            }])
            plans_df = pd.concat([plans_df, new_plan], ignore_index=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        plans_df.to_csv('plans.csv', index=False)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")

        bot.send_message(
            chat_id,
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–∞–Ω–∞:\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
            f"üí∞ –°—É–º–º–∞ –ø–ª–∞–Ω–∞: {amount} —Ä—É–±.\n\n"
            f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, confirm_plan_setting)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def confirm_plan_setting(message):
    try:
        chat_id = message.chat.id
        if message.text == '‚úÖ –î–∞':
            bot.send_message(
                chat_id,
                "‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            bot.send_message(
                chat_id,
                "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=types.ReplyKeyboardRemove()
            )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if chat_id in user_data:
            del user_data[chat_id]

@bot.message_handler(commands=['get_plans'])
def handle_get_plans(message):
    if user_roles.get(message.chat.id) != 'manager':
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    try:
        manager_id = user_chat_id[message.chat.id]

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_shops = shopofmanagers[shopofmanagers['id_manager'] == manager_id]['id_shop']
        manager_plans = plans_df[plans_df['shop_id'].isin(manager_shops)]

        if manager_plans.empty:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            return

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            manager_plans.to_excel(writer, sheet_name='Plans', index=False)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            worksheet = writer.sheets['Plans']
            for i, col in enumerate(manager_plans.columns):
                width = max(manager_plans[col].astype(str).map(len).max(), len(col)) + 2
                worksheet.set_column(i, i, width)

        output.seek(0)

        bot.send_document(
            message.chat.id,
            output,
            caption='üìä –ü–ª–∞–Ω—ã –¥–ª—è –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤',
            visible_file_name=f'plans_{datetime.datetime.now().date()}.xlsx'
        )
        output.close()

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

@bot.message_handler(commands=['statm'])
def handle_users(message):
    if user_roles.get(message.chat.id) == 'manager':
        users_text = """
–ü–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –ê: 87% 1009290202 –∏–∑ 10019189101
–ü–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –ë: 87% 10002 –∏–∑ 10019189101
        """
        bot.send_message(message.chat.id, users_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@bot.message_handler(commands=['my_plan'])
def handle_my_plan(message):
    if user_roles.get(message.chat.id) != 'shop':
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–∞–≥–∞–∑–∏–Ω–∞")
        return

    try:
        shop_id = user_chat_id[message.chat.id]
        shop_plan = plans_df[plans_df['shop_id'] == shop_id]

        if shop_plan.empty:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –î–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–∞–Ω")
            return

        plan = shop_plan.iloc[0]
        bot.send_message(
            message.chat.id,
            f"üìä –ü–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {plan['shop_name']}\n"
            f"üí∞ –°—É–º–º–∞ –ø–ª–∞–Ω–∞: {plan['plan_amount']} —Ä—É–±.\n"
            f"üìÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {plan['date']}"
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
@bot.message_handler(commands=['report'])
def handle_report(message):
    if user_roles.get(message.chat.id) != 'shop':
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        shop_id = user_chat_id.get(message.chat.id)
        if not shop_id:
            raise ValueError("–í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

        shop_info = names[names['id'] == shop_id]
        if shop_info.empty:
            raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        shop_name = shop_info.iloc[0]['name']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        shop_data[message.chat.id] = {
            'adress': shop_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            'cash': None,
            'cashless': None,
            'collection': None,
            'balance': None
        }

        msg = bot.send_message(message.chat.id, f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_name}':")
        bot.register_next_step_handler(msg, process_cash)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(message.chat.id, None)

def process_cash(message):
    try:
        chat_id = message.chat.id
        if chat_id not in shop_data:
            raise ValueError("–°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report")

        cash = float(message.text.strip())
        shop_data[chat_id]['cash'] = cash
        
        msg = bot.send_message(chat_id, "üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏:")
        bot.register_next_step_handler(msg, process_cashless)

    except ValueError:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(chat_id, None)

def process_cashless(message):
    try:
        chat_id = message.chat.id
        if chat_id not in shop_data:
            raise ValueError("–°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report")

        cashless = float(message.text.strip())
        shop_data[chat_id]['cashless'] = cashless
        
        msg = bot.send_message(chat_id, "üè¶ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, process_collection)

    except ValueError:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(chat_id, None)

def process_collection(message):
    try:
        chat_id = message.chat.id
        if chat_id not in shop_data:
            raise ValueError("–°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report")

        collection = float(message.text.strip())
        shop_data[chat_id]['collection'] = collection
        
        msg = bot.send_message(chat_id, "üìä –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è:")
        bot.register_next_step_handler(msg, process_balance)

    except ValueError:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(chat_id, None)

def process_balance(message):
    try:
        chat_id = message.chat.id
        if chat_id not in shop_data:
            raise ValueError("–°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /report")

        balance = float(message.text.strip())
        shop_data[chat_id]['balance'] = balance

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        required_fields = ['cash', 'cashless', 'collection', 'balance', 'adress']
        for field in required_fields:
            if field not in shop_data[chat_id] or shop_data[chat_id][field] is None:
                raise ValueError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        data = shop_data[chat_id]
        total_income = data['cash'] + data['cashless']
        total_with_balance = total_income + data['balance']

        report = f"""
üìã –û—Ç—á–µ—Ç –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:
üìç –¢–æ—á–∫–∞: {data['adress']}
üí∞ –ü—Ä–∏—Ö–æ–¥ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {data['cash']} —Ä—É–±.
üí≥ –ü—Ä–∏—Ö–æ–¥ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏: {data['cashless']} —Ä—É–±.
üè¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è: {data['collection']} —Ä—É–±.
üìä –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['balance']} —Ä—É–±.

‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥: {total_income} —Ä—É–±.
‚úÖ –ü—Ä–∏—Ö–æ–¥ —Å –æ—Å—Ç–∞—Ç–∫–æ–º: {total_with_balance} —Ä—É–±."""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        add_to_df(chat_id)
        
        bot.send_message(chat_id, report)
        bot.send_message(chat_id, "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    except ValueError as ve:
        bot.send_message(chat_id, str(ve))
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        shop_data.pop(chat_id, None)

def add_to_df(chat_id):
    try:
        if chat_id not in shop_data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        shop = shop_data[chat_id]
        required_fields = ['adress', 'cash', 'cashless', 'collection', 'balance']
        for field in required_fields:
            if field not in shop or shop[field] is None:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")

        current_datetime = datetime.now()  # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        file_name = f"reports_{current_datetime.year}_{current_datetime.month:02d}.xlsx"
        file_path = os.path.join(REPORTS_DIR, file_name)
        sheet_name = current_datetime.strftime("%Y-%m-%d")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs(REPORTS_DIR, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(file_path):
            wb = load_workbook(file_path)
            if sheet_name in wb.sheetnames:
                sheet = wb[sheet_name]
            else:
                sheet = wb.create_sheet(title=sheet_name)
                sheet.append(["–î–∞—Ç–∞", "–ú–∞–≥–∞–∑–∏–Ω", "–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ", "–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è", "–û—Å—Ç–∞—Ç–æ–∫"])
        else:
            wb = Workbook()
            wb.remove(wb.active)  # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
            sheet = wb.create_sheet(title=sheet_name)
            sheet.append(["–î–∞—Ç–∞", "–ú–∞–≥–∞–∑–∏–Ω", "–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ", "–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è", "–û—Å—Ç–∞—Ç–æ–∫"])

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.append([
            current_datetime.strftime("%Y-%m-%d %H:%M:%S"),
            shop['adress'],
            float(shop['cash']),
            float(shop['cashless']),
            float(shop['collection']),
            float(shop['balance'])
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(file_path)
        return True

    except PermissionError:
        raise ValueError("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞. –ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª Excel –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {str(e)}")
if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()