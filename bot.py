import telebot
from telebot import types
import pandas as pd
from io import BytesIO
import os
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists('users.csv'):
    names = pd.read_csv('users.csv')
else:
    names = pd.DataFrame(columns=['id', 'role', 'name', 'number'])

names=pd.DataFrame(columns=['id','role','name','number'])#—Å–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id
#kdkkdkd
TOKEN = '7791429879:AAEgbCL8bFjQYnb81Rf1s2Hn_F5lRbZ3eKo'
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_roles = {}  # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π
shop_data = {}    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞


@bot.message_handler(commands=['start', 'help'])
def welcome_message(message):
    welcome_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤!
–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:
- –°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç–æ—á–µ–∫
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã
- –°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    """
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(commands=['id'])
def ask_for_id(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID:")
    user_states[message.chat.id] = 'awaiting_id'
    bot.register_next_step_handler(msg, process_id)


def process_id(message):
    try:
        user_id = message.text.strip()

        if not user_id:
            raise ValueError("ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        first_char = user_id[0].upper()

        if first_char == 'A':
            role = 'admin'
            response = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        elif first_char == 'S':
            role = 'shop'
            response = "‚úÖ –†–µ–∂–∏–º –º–∞–≥–∞–∑–∏–Ω–∞\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/report - —Å–¥–∞—Ç—å –æ—Ç—á—ë—Ç"
        elif first_char == 'M':
            role = 'manager'
            response = "‚úÖ –†–µ–∂–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/plan - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω\n/statm - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        else:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å A, S –∏–ª–∏ M")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles[message.chat.id] = role
        bot.send_message(message.chat.id, response)

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        bot.send_message(message.chat.id, error_message)

    user_states.pop(message.chat.id, None)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['stats'])
def handle_stats(message):
    if user_roles.get(message.chat.id) == 'admin':
        stats_text = """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 143
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: 67
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: 82%
        """
        bot.send_message(message.chat.id, stats_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@bot.message_handler(commands=['users'])
def handle_users(message):
    if user_roles.get(message.chat.id) == 'admin':
        users_text = """
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
–ö–æ–º–∞–Ω–¥—ã:
/get_names- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_user - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove_user - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        bot.send_message(message.chat.id, users_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

user_data = {}
def create_and_add_id(role, name):
    roles_index = {'Developer': 'T', 'Administrator': 'A', 'Manager': 'M', 'Shop': 'S'}  # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    k = roles_index[role]

    existing = names[names['role'] == role]
    if existing.empty:
        n = 1
    else:
        n = existing['number'].max() + 1

    numeric_part = str(n).zfill(5)
    new_id = f"{k}{numeric_part}"  # –¢–µ–ø–µ—Ä—å ID —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    names.loc[len(names)] = [new_id, role, name, n]
    names.to_csv('users.csv', index=False)
    return new_id
def clean_user_data(chat_id):
    """–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id in user_data:
        del user_data[chat_id]
@bot.message_handler(commands=['add_user'])
def handle_add_user(message):
    if user_roles.get(message.chat.id) == 'admin':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        markup.add('Shop', 'Administrator', 'Manager')

        bot.send_message(message.chat.id, "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)
        bot.register_next_step_handler(message, process_role_step)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


def process_role_step(message):
    chat_id = message.chat.id
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")

        role_mapping = {
            'shop': 'Shop',
            'administrator': 'Administrator',
            'manager': 'Manager'
        }
        input_role = message.text.strip().lower()
        role_name = role_mapping.get(input_role)

        if not role_name:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å")

        user_data[chat_id] = {'role': role_name}
        bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_location_step)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        clean_user_data(chat_id)  # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
def process_location_step(message):
    chat_id = message.chat.id
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º")

        location = message.text.strip()
        if len(location) < 2:
            raise ValueError("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏")

        role_data = user_data.get(chat_id, {})
        role_name = role_data.get('role')

        unique_id = create_and_add_id(role_name, location)
        bot.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ!\nüè∑ ID: {unique_id}\nüìç –¢–æ—á–∫–∞: {location}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        clean_user_data(chat_id)  # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


@bot.message_handler(commands=['get_names'])
def send_names_excel(message):
    try:
        if user_roles.get(message.chat.id) != 'admin':
            bot.reply_to(message, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        if names.empty:
            bot.reply_to(message, "üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        output = BytesIO()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä sheet_name
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            names.to_excel(
                excel_writer=writer,
                sheet_name='Users',  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                index=False
            )

        output.seek(0)
        bot.send_document(
            chat_id=message.chat.id,
            document=output,
            caption='üìä –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            visible_file_name='users_database.xlsx'
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        output.close() if 'output' in locals() else None


@bot.message_handler(commands=['remove_user'])
def handle_remove_user(message):
    if user_roles.get(message.chat.id) == 'admin':
        bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_remove_user)
    else:
        bot.send_message(message.chat.id, "‚õî –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")


def process_remove_user(message):
    try:
        chat_id = message.chat.id
        raw_input = message.text.strip()
        user_id_to_remove = raw_input[0].upper() + raw_input[1:].lower()

        if not re.match(r'^[A-Za-z]\d{5}$', user_id_to_remove):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: A12345")

        # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        mask = names['id'].str.upper() == user_id_to_remove.upper()

        if not mask.any():
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        found_id = names.loc[mask, 'id'].values[0]

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        names.drop(names[mask].index, inplace=True)
        names.to_csv('users.csv', index=False)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {found_id} —É–¥–∞–ª—ë–Ω")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
#–§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

@bot.message_handler(commands=['plan'])
def handle_users(message):
    if user_roles.get(message.chat.id) == 'manager':
        users_text = """
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –≤–≤–æ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–∞–Ω–∞
–î–∞–ª–µ–µ, —Å–≤–µ—Ä–µ–≤—à–∏—Å—å —Å –≤–µ—Ä–Ω–æ—Å—Ç—å—é –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞–∂–º–∏—Ç–µ –î–ê‚úÖ
–ò–Ω–∞—á–µ –ù–ï–¢‚õî
–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        bot.send_message(message.chat.id, users_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

@bot.message_handler(commands=['statm'])
def handle_users(message):
    if user_roles.get(message.chat.id) == 'manager':
        users_text = """
–ü–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –ê: 87% 1009290202 –∏–∑ 10019189101
–ü–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –ë: 87% 10002 –∏–∑ 10019189101
        """
        bot.send_message(message.chat.id, users_text)
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@bot.message_handler(commands=['report'])
def handle_report(message):
    if user_roles.get(message.chat.id) == 'shop':
        shop_data[message.chat.id] = {
            'cash': None,
            'cashless': None,
            'collection': None,
            'balance': None
        }
        msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏:")
        bot.register_next_step_handler(msg, process_cash)
    else:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤")


# –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
def process_cash(message):
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        cash = float(message.text.strip())
        shop_data[message.chat.id]['cash'] = cash
        msg = bot.send_message(message.chat.id, "üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏:")
        bot.register_next_step_handler(msg, process_cashless)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(message.chat.id, None)


def process_cashless(message):
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        cashless = float(message.text.strip())
        shop_data[message.chat.id]['cashless'] = cashless
        msg = bot.send_message(message.chat.id, "üè¶ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, process_collection)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(message.chat.id, None)


def process_collection(message):
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        collection = float(message.text.strip())
        shop_data[message.chat.id]['collection'] = collection
        msg = bot.send_message(message.chat.id, "üìä –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è:")
        bot.register_next_step_handler(msg, process_balance)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        shop_data.pop(message.chat.id, None)


def process_balance(message):
    try:
        if message.content_type != 'text':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        balance = float(message.text.strip())
        shop_data[message.chat.id]['balance'] = balance

        report = f"""
üìã –û—Ç—á–µ—Ç –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:

üí∞ –ü—Ä–∏—Ö–æ–¥ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {shop_data[message.chat.id]['cash']} —Ä—É–±.
üí≥ –ü—Ä–∏—Ö–æ–¥ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏: {shop_data[message.chat.id]['cashless']} —Ä—É–±.
üè¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è: {shop_data[message.chat.id]['collection']} —Ä—É–±.
üìä –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {shop_data[message.chat.id]['balance']} —Ä—É–±.

–ü—Ä–∏—Ö–æ–¥: {shop_data[message.chat.id]['cash'] + shop_data[message.chat.id]['cashless']} —Ä—É–±.
–ü—Ä–∏—Ö–æ–¥ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –≤ –∫–∞—Å—Å–µ: {shop_data[message.chat.id]['cash'] + shop_data[message.chat.id]['cashless'] + shop_data[message.chat.id]['balance']} —Ä—É–±.
        """

        bot.send_message(message.chat.id, report)
        bot.send_message(message.chat.id, "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        shop_data.pop(message.chat.id, None)
if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()